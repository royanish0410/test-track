// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/prisma"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  TEACHER
}

model User {
  id            String        @id @default(uuid())
  fullname      String
  email         String        @unique
  clerkId       String        @unique
  emailVerified Boolean       @default(false)
  role          Role?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  quizattempts  MockQuizAttempt[]
  createdMockQuiz MockQuiz[]

  @@map("users")
}

model MockQuiz{
  id  String  @id @default(uuid())
  name  String
  number  Int
  endsAt  DateTime
  duration  Int
  teacherid String
  teacher User @relation(fields: [teacherid], references: [id])
  quizsections  QuizSection[]
  MockQuizAttempt MockQuizAttempt[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("mock_quizzes")
}

model MockQuizAttempt{
  id  String  @id @default(uuid())
  score Int
  studentId String
  student User  @relation(fields: [studentId],references: [id])
  
  mockQuizId  String
  mockQuiz  MockQuiz  @relation(fields: [mockQuizId],references: [id])

  attemptedAt DateTime  @default(now())
  completedAt DateTime?

  @@unique([studentId,mockQuizId])
  @@map("mock_quiz_attempts")
}

model QuizSection{
  id  String  @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  subjectId String
  subject Subject @relation(fields: [subjectId],references: [id])

  mockQuizId  String
  mockQuiz  MockQuiz  @relation(fields: [mockQuizId],references: [id])

  questionSection QuestionSection[]

  @@map("quiz_sections")
}

model Subject{
  id  String @id  @default(uuid())
  name  String
  imgUrl  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  quizSection QuizSection[]
  questionSubjects  QuestionSubject[]

  @@map("subjects")
}

model Question{
  id  String  @id @default(uuid())
  question  String?
  questionImg String?
  options String[]
  correctOne  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  questionSubjects  QuestionSubject[]
  questionSection QuestionSection[]

  @@map("questions")
}

model QuestionSubject{
  id  String  @id @default(uuid())

  questionId  String
  question  Question  @relation(fields: [questionId],references: [id])

  subjectId String
  subject Subject @relation(fields: [subjectId], references: [id])

  @@unique([questionId,subjectId])
  @@map("question_subjects")
}

model QuestionSection{
  id  String  @id @default(uuid())

  questionId  String
  question  Question  @relation(fields: [questionId],references: [id])

  quizSectionId String
  quizSection QuizSection @relation(fields: [quizSectionId],references: [id])

  @@unique([questionId,quizSectionId])

  @@map("question_sections")
}